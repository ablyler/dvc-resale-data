name: Deploy Infrastructure

on:
  push:
    branches: [main]
    paths:
      - "infrastructure/**"
      - ".github/workflows/infrastructure.yml"
  pull_request:
    branches: [main]
    paths:
      - "infrastructure/**"
      - ".github/workflows/infrastructure.yml"
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AZURE_RESOURCE_GROUP: dvc-resale-data
  TOFU_VERSION: "1.8.0"

jobs:
  # Job 1: Validate OpenTofu
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup OpenTofu
        uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: ${{ env.TOFU_VERSION }}

      - name: Azure Login via OIDC
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Verify Azure Authentication
        run: |
          az account show --output table
          echo "Authentication successful for validation"

      - name: OpenTofu Format Check
        run: |
          cd infrastructure
          tofu fmt -check

      - name: OpenTofu Init with Provider Upgrade
        run: |
          cd infrastructure
          tofu init -upgrade \
            -backend-config="resource_group_name=${{ env.AZURE_RESOURCE_GROUP }}" \
            -backend-config="storage_account_name=${{ secrets.TF_STATE_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=${{ secrets.TF_STATE_CONTAINER }}" \
            -backend-config="key=terraform.tfstate"

      - name: OpenTofu Validate
        run: |
          cd infrastructure
          tofu validate

      - name: OpenTofu Plan
        run: |
          cd infrastructure
          tofu plan \
            -var="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
            -var="resource_group_name=${{ env.AZURE_RESOURCE_GROUP }}" \
            -var="domain_name=dvcresaledata.com" \
            -var="scraper_delay=${{ secrets.SCRAPER_DELAY || '1.0' }}" \
            -var="scraper_max_pages=${{ secrets.SCRAPER_MAX_PAGES || '50' }}" \
            -var="scraper_log_level=${{ secrets.SCRAPER_LOG_LEVEL || 'INFO' }}" \
            -var="scraper_user_agent=${{ secrets.SCRAPER_USER_AGENT || 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36' }}" \
            -var="enable_compression=${{ secrets.ENABLE_COMPRESSION || 'true' }}" \
            -var="enable_caching=${{ secrets.ENABLE_CACHING || 'true' }}" \
            -var="disboards_url=${{ secrets.DISBOARDS_URL || 'https://www.disboards.com/' }}" \
            -var="function_timeout=${{ secrets.FUNCTION_TIMEOUT || '00:10:00' }}" \
            -var="batch_size=${{ secrets.BATCH_SIZE || '25' }}" \
            -var="request_timeout=${{ secrets.REQUEST_TIMEOUT || '30' }}" \
            -var="function_app_sku=${{ secrets.FUNCTION_APP_SKU || 'Y1' }}"
        env:
          TF_VAR_scraper_delay: ${{ secrets.SCRAPER_DELAY || '1.0' }}
          TF_VAR_scraper_max_pages: ${{ secrets.SCRAPER_MAX_PAGES || '50' }}
          TF_VAR_scraper_log_level: ${{ secrets.SCRAPER_LOG_LEVEL || 'INFO' }}
          TF_VAR_scraper_user_agent: ${{ secrets.SCRAPER_USER_AGENT || 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36' }}
          TF_VAR_enable_compression: ${{ secrets.ENABLE_COMPRESSION || 'true' }}
          TF_VAR_enable_caching: ${{ secrets.ENABLE_CACHING || 'true' }}
          TF_VAR_disboards_url: ${{ secrets.DISBOARDS_URL || 'https://www.disboards.com/' }}
          TF_VAR_function_timeout: ${{ secrets.FUNCTION_TIMEOUT || '00:10:00' }}
          TF_VAR_batch_size: ${{ secrets.BATCH_SIZE || '25' }}
          TF_VAR_request_timeout: ${{ secrets.REQUEST_TIMEOUT || '30' }}

  # Job 2: Deploy Infrastructure (production only)
  deploy:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: validate
    environment: production
    outputs:
      storage_account_name: ${{ steps.tofu.outputs.storage_account_name }}
      function_app_name: ${{ steps.tofu.outputs.function_app_name }}
      cdn_endpoint: ${{ steps.tofu.outputs.cdn_endpoint }}
      dns_name_servers: ${{ steps.tofu.outputs.dns_name_servers }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup OpenTofu
        uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: ${{ env.TOFU_VERSION }}
          tofu_wrapper: false

      - name: Azure Login via OIDC
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Verify Azure Authentication
        run: |
          az account show --output table
          echo "Authentication successful for deployment"

      - name: OpenTofu Init with Provider Upgrade
        run: |
          cd infrastructure
          tofu init -upgrade \
            -backend-config="resource_group_name=${{ env.AZURE_RESOURCE_GROUP }}" \
            -backend-config="storage_account_name=${{ secrets.TF_STATE_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=${{ secrets.TF_STATE_CONTAINER }}" \
            -backend-config="key=terraform.tfstate"

      - name: OpenTofu Plan
        run: |
          cd infrastructure
          tofu plan \
            -var="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
            -var="resource_group_name=${{ env.AZURE_RESOURCE_GROUP }}" \
            -var="domain_name=dvcresaledata.com" \
            -var="scraper_delay=${{ secrets.SCRAPER_DELAY || '1.0' }}" \
            -var="scraper_max_pages=${{ secrets.SCRAPER_MAX_PAGES || '50' }}" \
            -var="scraper_log_level=${{ secrets.SCRAPER_LOG_LEVEL || 'INFO' }}" \
            -var="scraper_user_agent=${{ secrets.SCRAPER_USER_AGENT || 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36' }}" \
            -var="enable_compression=${{ secrets.ENABLE_COMPRESSION || 'true' }}" \
            -var="enable_caching=${{ secrets.ENABLE_CACHING || 'true' }}" \
            -var="disboards_url=${{ secrets.DISBOARDS_URL || 'https://www.disboards.com/' }}" \
            -var="function_timeout=${{ secrets.FUNCTION_TIMEOUT || '00:10:00' }}" \
            -var="batch_size=${{ secrets.BATCH_SIZE || '25' }}" \
            -var="request_timeout=${{ secrets.REQUEST_TIMEOUT || '30' }}" \
            -var="function_app_sku=${{ secrets.FUNCTION_APP_SKU || 'Y1' }}" \
            -out=tfplan
        env:
          TF_VAR_scraper_delay: ${{ secrets.SCRAPER_DELAY || '1.0' }}
          TF_VAR_scraper_max_pages: ${{ secrets.SCRAPER_MAX_PAGES || '50' }}
          TF_VAR_scraper_log_level: ${{ secrets.SCRAPER_LOG_LEVEL || 'INFO' }}
          TF_VAR_scraper_user_agent: ${{ secrets.SCRAPER_USER_AGENT || 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36' }}
          TF_VAR_enable_compression: ${{ secrets.ENABLE_COMPRESSION || 'true' }}
          TF_VAR_enable_caching: ${{ secrets.ENABLE_CACHING || 'true' }}
          TF_VAR_disboards_url: ${{ secrets.DISBOARDS_URL || 'https://www.disboards.com/' }}
          TF_VAR_function_timeout: ${{ secrets.FUNCTION_TIMEOUT || '00:10:00' }}
          TF_VAR_batch_size: ${{ secrets.BATCH_SIZE || '25' }}
          TF_VAR_request_timeout: ${{ secrets.REQUEST_TIMEOUT || '30' }}

      - name: OpenTofu Apply
        id: tofu
        run: |
          cd infrastructure
          tofu apply tfplan
          echo "storage_account_name=$(tofu output -raw website_storage_account_name)" >> $GITHUB_OUTPUT
          echo "function_app_name=$(tofu output -raw function_app_name)" >> $GITHUB_OUTPUT
          echo "cdn_endpoint=$(tofu output -raw cdn_endpoint)" >> $GITHUB_OUTPUT
          echo "dns_name_servers=$(tofu output -raw dns_zone_name_servers)" >> $GITHUB_OUTPUT
        env:
          TF_VAR_scraper_delay: ${{ secrets.SCRAPER_DELAY || '1.0' }}
          TF_VAR_scraper_max_pages: ${{ secrets.SCRAPER_MAX_PAGES || '50' }}
          TF_VAR_scraper_log_level: ${{ secrets.SCRAPER_LOG_LEVEL || 'INFO' }}
          TF_VAR_scraper_user_agent: ${{ secrets.SCRAPER_USER_AGENT || 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36' }}
          TF_VAR_enable_compression: ${{ secrets.ENABLE_COMPRESSION || 'true' }}
          TF_VAR_enable_caching: ${{ secrets.ENABLE_CACHING || 'true' }}
          TF_VAR_disboards_url: ${{ secrets.DISBOARDS_URL || 'https://www.disboards.com/' }}
          TF_VAR_function_timeout: ${{ secrets.FUNCTION_TIMEOUT || '00:10:00' }}
          TF_VAR_batch_size: ${{ secrets.BATCH_SIZE || '25' }}
          TF_VAR_request_timeout: ${{ secrets.REQUEST_TIMEOUT || '30' }}
          TF_VAR_function_app_sku: ${{ secrets.FUNCTION_APP_SKU || 'Y1' }}

      - name: Output Infrastructure Details
        run: |
          cd infrastructure
          echo "## 🚀 Infrastructure Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Resource | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Website URL | https://dvcresaledata.com |" >> $GITHUB_STEP_SUMMARY
          echo "| API URL | https://api.dvcresaledata.com |" >> $GITHUB_STEP_SUMMARY
          echo "| Function App | $(tofu output -raw function_app_url) |" >> $GITHUB_STEP_SUMMARY
          echo "| Function Plan | Y1 (Consumption) |" >> $GITHUB_STEP_SUMMARY
          echo "| Storage Account | $(tofu output -raw data_storage_account_name) |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### DNS Configuration" >> $GITHUB_STEP_SUMMARY
          echo "Configure your domain registrar with these name servers:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          tofu output -raw dns_zone_name_servers | sed 's/,/\n/g' >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  # Job 3: Post-Deployment Tests
  test:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Azure Login via OIDC
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Verify Azure Authentication
        run: |
          az account show --output table
          echo "Authentication successful for testing"

      - name: Wait for deployment
        run: sleep 60

      - name: Test Function App Health
        run: |
          curl -f "https://${{ needs.deploy.outputs.function_app_name }}.azurewebsites.net/api/health" || true

      - name: Test Storage Account Web Endpoint
        run: |
          curl -I "https://${{ needs.deploy.outputs.storage_account_name }}.z13.web.core.windows.net/" || true

      - name: Test CDN Endpoint
        run: |
          curl -I "https://${{ needs.deploy.outputs.cdn_endpoint }}.azureedge.net" || true

  # Job 4: Cleanup on Failure
  cleanup:
    if: failure() && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [validate, deploy]
    steps:
      - name: Azure Login via OIDC
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Verify Azure Authentication
        run: |
          az account show --output table
          echo "Authentication successful for cleanup"

      - name: Notify on failure
        run: |
          echo "Infrastructure deployment failed for commit ${{ github.sha }}"
          echo "Manual intervention may be required"

      - name: Generate failure report
        run: |
          echo "## ❌ Infrastructure Deployment Failed" >> $GITHUB_STEP_SUMMARY
          echo "Commit: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "Branch: ${{ github.ref }}" >> $GITHUB_STEP_SUMMARY
          echo "Workflow: ${{ github.workflow }}" >> $GITHUB_STEP_SUMMARY
          echo "Run ID: ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
