name: Deploy to Azure

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AZURE_RESOURCE_GROUP: dvc-resale-data
  WEBAPP_PACKAGE_PATH: "./webapp"
  NODE_VERSION: "18.x"
  TOFU_VERSION: "1.6.0"

jobs:
  # Job 1: Build and Test React Webapp
  build-webapp:
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout GitHub Action"
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: "${{ env.WEBAPP_PACKAGE_PATH }}/package-lock.json"

      - name: "Install Dependencies"
        run: |
          cd ${{ env.WEBAPP_PACKAGE_PATH }}
          npm ci

      - name: "Run Tests"
        run: |
          cd ${{ env.WEBAPP_PACKAGE_PATH }}
          npm run test -- --coverage --passWithNoTests --watchAll=false

      - name: "Build Application"
        run: |
          cd ${{ env.WEBAPP_PACKAGE_PATH }}
          npm run build
        env:
          CI: false
          REACT_APP_API_BASE_URL: ${{ secrets.REACT_APP_API_BASE_URL }}
          REACT_APP_ENV: production
          REACT_APP_ENABLE_ANALYTICS: false
          GENERATE_SOURCEMAP: false

      - name: "Upload Webapp Artifact"
        uses: actions/upload-artifact@v3
        with:
          name: webapp-build
          path: ${{ env.WEBAPP_PACKAGE_PATH }}/build

  # Job 2: Deploy Infrastructure with OpenTofu
  deploy-infrastructure:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: production
    outputs:
      storage_account_name: ${{ steps.terraform.outputs.storage_account_name }}
      function_app_name: ${{ steps.terraform.outputs.function_app_name }}
      cdn_endpoint: ${{ steps.terraform.outputs.cdn_endpoint }}
    steps:
      - name: "Checkout GitHub Action"
        uses: actions/checkout@v4

      - name: "Setup OpenTofu"
        uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: ${{ env.TOFU_VERSION }}
          tofu_wrapper: false

      - name: "Azure Login via OIDC"
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: "OpenTofu Init"
        run: |
          cd infrastructure
          tofu init \
            -backend-config="resource_group_name=${{ env.AZURE_RESOURCE_GROUP }}" \
            -backend-config="storage_account_name=${{ secrets.TF_STATE_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=${{ secrets.TF_STATE_CONTAINER }}" \
            -backend-config="key=terraform.tfstate"

      - name: "OpenTofu Plan"
        run: |
          cd infrastructure
          tofu plan \
            -var="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
            -var="resource_group_name=${{ env.AZURE_RESOURCE_GROUP }}" \
            -var="domain_name=dvcresaledata.com" \
            -var="scraper_delay=${{ secrets.SCRAPER_DELAY || '1.0' }}" \
            -var="scraper_max_pages=${{ secrets.SCRAPER_MAX_PAGES || '50' }}" \
            -var="scraper_log_level=${{ secrets.SCRAPER_LOG_LEVEL || 'INFO' }}" \
            -var="scraper_user_agent=${{ secrets.SCRAPER_USER_AGENT || 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36' }}" \
            -var="enable_compression=${{ secrets.ENABLE_COMPRESSION || 'true' }}" \
            -var="enable_caching=${{ secrets.ENABLE_CACHING || 'true' }}" \
            -var="disboards_url=${{ secrets.DISBOARDS_URL || 'https://www.disboards.com/' }}" \
            -var="function_timeout=${{ secrets.FUNCTION_TIMEOUT || '00:10:00' }}" \
            -var="batch_size=${{ secrets.BATCH_SIZE || '25' }}" \
            -var="request_timeout=${{ secrets.REQUEST_TIMEOUT || '30' }}" \
            -out=tfplan

      - name: "OpenTofu Apply"
        id: terraform
        run: |
          cd infrastructure
          tofu apply tfplan
          echo "storage_account_name=$(tofu output -raw website_storage_account_name)" >> $GITHUB_OUTPUT
          echo "function_app_name=$(tofu output -raw function_app_name)" >> $GITHUB_OUTPUT
          echo "cdn_endpoint=$(tofu output -raw cdn_endpoint)" >> $GITHUB_OUTPUT
        env:
          TF_VAR_scraper_delay: ${{ secrets.SCRAPER_DELAY || '1.0' }}
          TF_VAR_scraper_max_pages: ${{ secrets.SCRAPER_MAX_PAGES || '50' }}
          TF_VAR_scraper_log_level: ${{ secrets.SCRAPER_LOG_LEVEL || 'INFO' }}
          TF_VAR_scraper_user_agent: ${{ secrets.SCRAPER_USER_AGENT || 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36' }}
          TF_VAR_enable_compression: ${{ secrets.ENABLE_COMPRESSION || 'true' }}
          TF_VAR_enable_caching: ${{ secrets.ENABLE_CACHING || 'true' }}
          TF_VAR_disboards_url: ${{ secrets.DISBOARDS_URL || 'https://www.disboards.com/' }}
          TF_VAR_function_timeout: ${{ secrets.FUNCTION_TIMEOUT || '00:10:00' }}
          TF_VAR_batch_size: ${{ secrets.BATCH_SIZE || '25' }}
          TF_VAR_request_timeout: ${{ secrets.REQUEST_TIMEOUT || '30' }}

  # Job 3: Deploy Azure Functions
  deploy-functions:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: deploy-infrastructure
    environment: production
    steps:
      - name: "Checkout GitHub Action"
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: "Resolve Project Dependencies"
        run: |
          cd azure-functions
          python -m pip install --upgrade pip
          pip install -r requirements.txt --target=".python_packages/lib/site-packages"

      - name: "Deploy to Azure Functions"
        uses: Azure/functions-action@v1
        with:
          app-name: ${{ needs.deploy-infrastructure.outputs.function_app_name }}
          package: "./azure-functions"
          publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE }}
          scm-do-build-during-deployment: true
          enable-oryx-build: true

  # Job 4: Deploy React Webapp to Storage Account
  deploy-webapp:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: [build-webapp, deploy-infrastructure]
    environment: production
    steps:
      - name: "Download Webapp Artifact"
        uses: actions/download-artifact@v3
        with:
          name: webapp-build
          path: ./build

      - name: "Azure Login via OIDC"
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: "Verify Azure Authentication"
        run: |
          az account show --output table
          echo "Authentication successful"

      - name: "Deploy to Storage Account"
        run: |
          az storage blob upload-batch \
            --source ./build \
            --destination '$web' \
            --account-name ${{ needs.deploy-infrastructure.outputs.storage_account_name }} \
            --overwrite

      - name: "Purge Front Door Cache"
        run: |
          az afd endpoint purge \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --endpoint-name ${{ needs.deploy-infrastructure.outputs.cdn_endpoint }} \
            --profile-name dvcresaledata-frontdoor \
            --content-paths "/*"

  # Job 5: Post-Deployment Tests
  post-deployment-tests:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: [deploy-functions, deploy-webapp]
    steps:
      - name: "Test Function App Health"
        run: |
          sleep 60  # Wait for deployment to complete
          curl -f "https://${{ needs.deploy-infrastructure.outputs.function_app_name }}.azurewebsites.net/api/health" || exit 1

      - name: "Test Website"
        run: |
          curl -f "https://dvcresaledata.com" || exit 1
          curl -f "https://www.dvcresaledata.com" || exit 1

      - name: "Test API Endpoints"
        run: |
          curl -f "https://dvcresaledata.com/api/rofr-stats" || exit 1
